# MEMO--------------------------------------------------------------------------
# ・「@slot_money」自販機に入っている総計？投入金額？
#     =>わかりにくいので、投入した金額の総計の変数を「@total」にしたい
​
# ・「current_slot_money」現在のお金の確認メソッド？
#     =>これもわかりにくいので、投入金額関連メソッドを「insert」としたい
​
# ・「return_money」お金返却メソッド
#     =>下記のサイト通りに「pay_back」メソッドにしたい
​
# ・このサイトのワードに揃えたい
# http://devtesting.jp/tddbc/?TDDBC%E4%BB%99%E5%8F%B002%2F%E8%AA%B2%E9%A1%8C%E7%94%A8%E8%AA%9E%E9%9B%86
​
​

# <課題・参考サイト>
# http://devtesting.jp/tddbc/?TDDBC%E5%A4%A7%E9%98%AA3.0%2F%E8%AA%B2%E9%A1%8C
# https://github.com/Romu-Muroga/tdd-bc-osaka3.0-task/blob/master/vending_machine.rb
# https://blog.jnito.com/entry/2013/05/22/073525
# -------------------------------------------------------------------------------
​
​
# defaultで井関さんから渡された確認方法(名前など変更したいメモ)----------------
    # 初期設定
      # vm = VendingMachine.new
​
    # 作成した自動販売機に100円を入れる
      # vm.slot_money (100)
      # => vm.insert (100)
​
    # 作成した自動販売機に入れたお金がいくらかを確認する（表示する）
      # vm.current_slot_money
      # => vm.total
​
    # 作成した自動販売機に入れたお金を返してもらう
      # vm.return_money
      # =>vm.pay_back
​
# ----------------------------------------------------------------------
​
​
# ステップ０-------お金の投入と払い戻し----------------
  # 済① 10円玉、50円玉、100円玉、500円玉、1000円札を１つずつ投入できる。「vm.insert(100)」
  # 済② 投入は複数回できる。
  # 済③ 投入金額の総計を取得できる。「vm.total」
  # 済④ 払い戻し操作を行うと、投入金額の総計を釣り銭として出力する。「vm.pay_back」
# ----------------------------------------------------
​
​
# ステップ１-----------扱えないお金-------------------
  # 済①想定外のもの（硬貨：１円玉、５円玉。お札：千円札以外のお札）が投入された場合は、投入金額に加算せず、それをそのまま釣り銭としてユーザに出力する。
    # ex. 「vm.insert(5)」 => puts "#{5}円は使えませんよ！"
# ----------------------------------------------------
​
​
# ステップ２-------ジュースの管理-------------------
  # 済①値段と名前の属性からなるジュースを１種類格納できる。初期状態で、コーラ（値段:120円、名前”コーラ”）を5本格納している。
  # ② 格納されているジュースの情報（値段と名前と在庫）を取得できる。
    #ex.「vm.stock_info」 ハッシュで情報GETできるようにしたい?
# ----------------------------------------------------
​
​
# ステップ３-------購入-------------------------------
  # ①投入金額、在庫の点で、コーラが購入できるかどうかを取得できる。
    # =>「vm.purchase」=>(drink_menu)
  # ②ジュース値段以上の投入金額が投入されている条件下で購入操作を行うと、ジュースの在庫を減らし、売り上げ金額を増やす。
  # ③投入金額が足りない場合もしくは在庫がない場合、購入操作を行っても何もしない。
    # =>「vm.purchase」=> (drink_menu) => (商品番号index入力) => (purchase_select(int))
  # 済④ 現在の売上金額を取得できる
    # =>「vm.sale_amount」要確認
  # ⑤払い戻し操作では現在の投入金額からジュース購入金額を引いた釣り銭を出力する。
    # =>(purchase_select)のなかの@total管理でOK
# ----------------------------------------------------
​
​
# ステップ４-------機能拡張---------------------------
  # ①ジュースを3種類管理できるようにする。
  # ②在庫にレッドブル（値段:200円、名前”レッドブル”）5本を追加する。
  # ③在庫に水（値段:100円、名前”水”）5本を追加する。
  # ④投入金額、在庫の点で購入可能なドリンクのリストを取得できる。
# ----------------------------------------------------
​
# ステップ５-------釣り銭と売り上げ管理---------------
  # ①ジュース値段以上の投入金額が投入されている条件下で購入操作を行うと、釣り銭（投入金額とジュース値段の差分）を出力する。
  # ②ジュースと投入金額が同じ場合、つまり、釣り銭0円の場合も、釣り銭0円と出力する。
  # ③釣り銭の硬貨の種類は考慮しなくてよい。
# ----------------------------------------------------